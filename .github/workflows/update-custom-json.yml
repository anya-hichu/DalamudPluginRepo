name: Update custom.json for all plugins

on:
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch:

jobs:
  update-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests

      - name: Update custom.json
        run: |
          python3 <<'EOF'
          import json, re, requests
          from datetime import datetime

          def get_owner_repo(url):
              m = re.search("github\\.com/([^/]+)/([^/]+)$", url.strip("/"))
              return m.groups() if m else (None, None)

          def to_unix_timestamp(iso_str):
              if not iso_str:
                  return None
              try:
                  dt = datetime.strptime(iso_str, "%Y-%m-%dT%H:%M:%SZ")
                  return int(dt.timestamp())
              except Exception:
                  return None

          with open("custom.json", "r") as f:
              plugins = json.load(f)

          updated = False
          for plugin in plugins:
              repo_url = plugin.get("RepoUrl")
              if not repo_url:
                  print(f"Skipping {plugin.get('InternalName')} - no RepoUrl")
                  continue

              owner, repo = get_owner_repo(repo_url)
              if not owner or not repo:
                  print(f"Skipping {plugin.get('InternalName')} - invalid RepoUrl: {repo_url}")
                  continue

              api_url = f"https://api.github.com/repos/{owner}/{repo}/releases?per_page=100"
              print(f"Fetching releases for {plugin.get('InternalName')} ({api_url})")
              resp = requests.get(api_url)
              if resp.status_code != 200:
                  print(f"Failed to fetch {api_url}: {resp.status_code}")
                  continue

              releases = resp.json()
              if not isinstance(releases, list) or not releases:
                  print(f"No releases for {plugin.get('InternalName')}")
                  continue

              total_downloads = sum(
                  a.get("download_count", 0)
                  for r in releases
                  for a in r.get("assets", [])
              )

              last_updated_iso = max(
                  (r.get("published_at") for r in releases if r.get("published_at")),
                  default=None
              )
              last_updated_unix = to_unix_timestamp(last_updated_iso)

              plugin["LastUpdate"] = last_updated_unix
              plugin["DownloadCount"] = total_downloads
              updated = True
              print(f"âœ” Updated {plugin.get('InternalName')}: {total_downloads} downloads, last updated {last_updated_unix}")

          if updated:
              with open("custom.json", "w") as f:
                  json.dump(plugins, f, indent=2)
          else:
              print("No updates to apply.")
          EOF

      - name: Archive custom.json
        uses: actions/upload-artifact@v4
        with:
          name: custom-json-archive
          path: custom.json

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add custom.json
          git commit -m "chore: update custom.json for all plugins" || echo "No changes to commit"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
